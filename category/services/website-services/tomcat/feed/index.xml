<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Tomcat &#8211; Eternal Center</title>
	<atom:link href="https://eternalcenter-2022-02.github.io/category/services/website-services/tomcat/feed/" rel="self" type="application/rss+xml" />
	<link>https://eternalcenter-2022-02.github.io/</link>
	<description></description>
	<lastBuildDate>Wed, 26 Jan 2022 14:12:23 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>[命令] Linux 命令 curl （测试网页访问）</title>
		<link>https://eternalcenter-2022-02.github.io/curl/</link>
		
		<dc:creator><![CDATA[Mingyu Zhu]]></dc:creator>
		<pubDate>Wed, 28 Jul 2021 08:00:30 +0000</pubDate>
				<category><![CDATA[Apache]]></category>
		<category><![CDATA[Chinese (中文)]]></category>
		<category><![CDATA[Django Service (服务)]]></category>
		<category><![CDATA[Nginx]]></category>
		<category><![CDATA[Nginx Monitor (监控)]]></category>
		<category><![CDATA[Services (服务)]]></category>
		<category><![CDATA[System (系统)]]></category>
		<category><![CDATA[System Network (系统网络)]]></category>
		<category><![CDATA[System Network & System Security & System Log (系统网络 & 系统安全 & 系统日志)]]></category>
		<category><![CDATA[Tomcat]]></category>
		<category><![CDATA[Website Services (网站服务)]]></category>
		<guid isPermaLink="false">https://eternalcenter-2022-02.github.io/?p=17159</guid>

					<description><![CDATA[内容一：测试网页可以被访问的案例 （补充：这里以直接访问 https://eternalcenter-2022-02.github.io/ 网页为例） 内容二：测试网页访问速度的案例2.1 案例一：显示测试过程 （补充：这里以访问并测试 https://eternalcenter-2022-02.github.io，并显示测试过程为例）/ 2.2 案例二：不显示测试过程 （补充：这里以访问并测试 https://eternalcenter-2022-02.github.io，并不显示测试过程为例）/ 内容三：测试使用代理访问网页的案例3.1 案例一：使用代理 （补充：这里以通过 proxy.example.com:8080 代理访问 https://eternalcenter-2022-02.github.io/ 网页为例） 3.2 案例二：使用代理并使用用户进行验证 （补充：这里以通过 proxy.example.com:8080 代理并使用 proxy user 和 password 进行验证访问 https://eternalcenter-2022-02.github.io/ 网页为例） 内容四： 测试使用证书访问网页的案例 （补充：这里以通过 eternalcenter.com.pem 证书访问 https://eternalcenter-2022-02.github.io/ 网页为例） 内容五：其他测试访问网页的案例5.1 案例一：将网页下载后另存为别的文件 （补充：这里以下载 https://eternalcenter-2022-02.github.io/ 并另存为 eternalcentre.com 为例） 5.2 案例二：不使用安全策略下载的案例 （补充：这里以不使用安全策略下载 https://eternalcenter-2022-02.github.io）/ 5.3 案例三：静默下载的案例 （补充：这里以静默下载 https://eternalcenter-2022-02.github.io/ 为例）]]></description>
										<content:encoded><![CDATA[
<h4> 内容一：测试网页可以被访问的案例 </h4>



<pre class="wp-block-code"><code># curl -v -k https://eternalcenter-2022-02.github.io/</code></pre>



<p> （补充：这里以直接访问 https://eternalcenter-2022-02.github.io/ 网页为例） </p>



<h4>内容二：测试网页访问速度的案例<br>2.1 案例一：显示测试过程</h4>



<pre class="wp-block-code"><code># curl -o /dev/null -s -w %{http_code}:%{http_connect}:%{content_type}:%{time_namelookup}:%{time_redirect}:%{time_pretransfer}:%{time_connect}:%{time_starttransfer}:%{time_total}:%{speed_download} https://eternalcenter-2022-02.github.io/</code></pre>



<p>（补充：这里以访问并测试  https://eternalcenter-2022-02.github.io，并显示测试过程为例）/</p>



<h4>2.2 案例二：不显示测试过程</h4>



<pre class="wp-block-code"><code># curl -o /dev/null -w %{http_code}:%{http_connect}:%{content_type}:%{time_namelookup}:%{time_redirect}:%{time_pretransfer}:%{time_connect}:%{time_starttransfer}:%{time_total}:%{speed_download} https://
eternalcenter.com</code></pre>



<p> （补充：这里以访问并测试   https://eternalcenter-2022-02.github.io，并不显示测试过程为例）/ </p>



<h4>内容三：测试使用代理访问网页的案例<br>3.1 案例一：使用代理</h4>



<pre class="wp-block-code"><code># curl -v --proxy proxy.example.com:8080 https://eternalcenter-2022-02.github.io/</code></pre>



<p>（补充：这里以通过 proxy.example.com:8080 代理访问 https://eternalcenter-2022-02.github.io/ 网页为例）</p>



<h4>3.2 案例二：使用代理并使用用户进行验证</h4>



<pre class="wp-block-code"><code># curl -v --&lt;proxy user&gt; user:&lt;password&gt; --proxy proxy.example.com:8080 https://eternalcenter-2022-02.github.io/</code></pre>



<p>（补充：这里以通过 proxy.example.com:8080 代理并使用 proxy user 和 password 进行验证访问 https://eternalcenter-2022-02.github.io/ 网页为例）</p>



<h4>内容四： 测试使用证书访问网页的案例 </h4>



<pre class="wp-block-code"><code># curl -v -k https://eternalcenter-2022-02.github.io/ --cacert /eternalcenter.com.pem</code></pre>



<p>（补充：这里以通过 eternalcenter.com.pem 证书访问 https://eternalcenter-2022-02.github.io/ 网页为例）</p>



<h4>内容五：其他测试访问网页的案例<br>5.1 案例一：将网页下载后另存为别的文件</h4>



<pre class="wp-block-code"><code># curl -v -k https://eternalcenter-2022-02.github.io/ -o eternalcentre.com</code></pre>



<p>（补充：这里以下载 https://eternalcenter-2022-02.github.io/ 并另存为 eternalcentre.com 为例）</p>



<h4>5.2 案例二：不使用安全策略下载的案例</h4>



<pre class="wp-block-code"><code># curl -v -k https://eternalcenter-2022-02.github.io/ --insecure</code></pre>



<p>（补充：这里以不使用安全策略下载 https://eternalcenter-2022-02.github.io）/</p>



<h4>5.3 案例三：静默下载的案例</h4>



<pre class="wp-block-code"><code># curl -v -k https://eternalcenter-2022-02.github.io/ --silent</code></pre>



<p>（补充：这里以静默下载 https://eternalcenter-2022-02.github.io/ 为例）</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
